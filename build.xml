<!-- build configuration -->
<project name="everything" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <property name="app.ident" value="everything"/>
  <property name="src.dir" value="src/java"/>
  <property name="gsrc.dir" value="src/gwt"/>
  <property name="wsrc.dir" value="src/web"/>
  <property name="asrc.dir" value="src/as"/>
  <property name="deploy.dir" value="dist"/>
  <property name="pkg.user" value="_samsara"/>
  <property name="pkg.maintainer.name" value="Three Rings Design"/>
  <property name="pkg.maintainer.email" value="ooo-dev@threerings.net"/>

  <!-- bring in our standard build support -->
  <import file="build/etc/build-support.xml"/>

  <!-- we need these libraries to build -->
  <filelist dir="." id="build.libs">
    <file name="extlibs/java/commons-collections.jar"/>
    <file name="extlibs/java/google-collect.jar"/>
    <file name="extlibs/java/guice.jar"/>
    <file name="extlibs/java/gwt-user.jar"/>
    <file name="extlibs/java/junit4.jar"/>
    <file name="extlibs/java/servlet-api.jar"/>
    <file name="extlibs/java/velocity-1.5-dev.jar"/>
    <file name="extlibs/flash/corelib.swc"/>
    <file name="extlibs/flash/flexlib.swc"/>
    <file name="extlibs/flash/tweener.swc"/>
  </filelist>

  <!-- and these libraries to build and at runtime (the rest are provided by samsara) -->
  <filelist dir="." id="runtime.libs">
    <file name="extlibs/java/commons-lang.jar"/>
    <file name="extlibs/java/commons-fileupload.jar"/>
    <file name="extlibs/java/commons-io.jar"/>
    <file name="extlibs/java/commons-logging.jar"/>
    <file name="extlibs/java/json.jar"/>
    <file name="extlibs/java/jvnet-runtime.jar"/>
    <file name="extlibs/java/facebook-java-api.jar"/>
    <file name="extlibs/java/facebook-java-api-schema.jar"/>
    <file name="extlibs/java/s3lib.jar"/>
  </filelist>

  <path id="build.classpath">
    <pathelement location="${deploy.dir}/classes"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
  </path>

  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/classes"/>

    <!-- obtain our configuration files -->
    <gatherconfiguration app="${app.ident}" distribution="${ooo.distribution}" dest="${deploy.dir}">
      <sources refid="ooo.appsconfig.source"/>
      <sources><directory path="${basedir}/etc"/></sources>
      <files>
        <file name="build.properties"/>
        <file name="everything.properties"/>
      </files>
    </gatherconfiguration>
    <property file="${deploy.dir}/build.properties"/>
    <property file="${deploy.dir}/everything.properties"/>

    <!-- copy our build dependencies into place -->
    <mkdir dir="${deploy.dir}/lib"/>
    <copyfilelist dest="${deploy.dir}/lib">
      <filelist refid="build.libs"/>
      <filelist refid="runtime.libs"/>
    </copyfilelist>
  </target>

  <target name="mavendeps" depends="prepare" description="Fetches our dependencies via Maven.">
    <artifact:dependencies filesetId="dependency.fileset">
      <remoteRepository refid="ooo.maven.depends.repo"/>
      <dependency groupId="com.samskivert" artifactId="depot" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.samskivert" artifactId="depot-gwt" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings" artifactId="samsara-app" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings" artifactId="gwt-utils" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings" artifactId="threerings" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings" artifactId="ooolib" version="0.0-SNAPSHOT" type="swc"/>
    </artifact:dependencies>
    <copy todir="${deploy.dir}/lib">
      <fileset refid="dependency.fileset"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <target name="version" depends="prepare">
    <!-- generate a build version and create our Build.java file -->
    <tstamp><format property="build.version" pattern="yyyyMMddHHmmss"/></tstamp>
    <tstamp><format property="build.time" pattern="yyyy-MM-dd HH:mm:ss"/></tstamp>
    <copy file="${src.dir}/com/threerings/everything/data/Build.java.tmpl"
          tofile="${src.dir}/com/threerings/everything/data/Build.java" overwrite="true">
      <filterset>
        <filter token="build_time" value="${build.time}"/>
        <filter token="build_version" value="${build.version}"/>
        <filter token="facebook_key" value="${facebook_key}"/>
        <filter token="candidate_facebook_key" value="${candidate_facebook_key}"/>
        <filter token="facebook_want_tmpl" value="${facebook_want_tmpl}"/>
        <filter token="facebook_got_tmpl" value="${facebook_got_tmpl}"/>
        <filter token="facebook_gave_tmpl" value="${facebook_gave_tmpl}"/>
        <filter token="kontagent_key" value="${kontagent_key}"/>
        <filter token="billing_url" value="${billing_url}"/>
      </filterset>
    </copy>
    <echo>Assigned build version ${build.version}.</echo>
  </target>

  <target name="clean" description="Cleans out the compilation results.">
    <delete dir="${deploy.dir}/classes"/>
  </target>

  <target name="distcleanall" depends="clean" description="Cleans out all build data.">
    <delete dir="${deploy.dir}"/>
    <delete file="${src.dir}/com/threerings/everything/data/Build.java"/>
    <delete file="etc/flex-config.xml"/>
    <delete><fileset dir="${gsrc.dir}" includes="client/*/*Messages.java"
                     excludes="client/util/Messages.java"/></delete>
  </target>

  <target name="compile" depends="prepare" description="Compiles the source code.">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes" debug="on"
           optimize="off" deprecation="on" includeAntRuntime="no">
      <classpath refid="build.classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="gclient" depends="prepare" description="Builds our GWT client.">
    <!-- blow away our old app -->
    <delete dir="${deploy.dir}/gwt/${app.ident}"/>

    <!-- regenerates our i18n messages classes -->
    <taskdef name="i18nsync" classname="com.threerings.gwt.tools.I18nSyncTask"
             classpathref="build.classpath"/>
    <i18nsync srcdir="${gsrc.dir}">
      <fileset dir="${gsrc.dir}" includes="**/*Messages.properties"/>
    </i18nsync>

    <!-- invoke the GWT compiler and grindy grindy grindy -->
    <java fork="true" maxmemory="1024M" failonerror="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <fileset dir="extlibs/java" includes="gwt-dev-*.jar"/> <!-- the GWT compiler -->
        <fileset dir="${deploy.dir}/lib">
          <include name="gwt-user.jar"/>
          <include name="gwt-utils*.jar"/>
          <include name="samskivert-gwt*.jar"/>
          <include name="depot-gwt*.jar"/>
          <include name="samsara-app*.jar"/>
        </fileset>
        <pathelement location="${src.dir}"/>
        <pathelement location="${gsrc.dir}"/>
      </classpath>
      <!-- temporary workaround to crashing problem on build server's BSD java -->
      <jvmarg value="-XX:CompileCommand=exclude,org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding,&lt;init&gt;"/>
      <jvmarg value="-XX:CompileCommand=exclude,org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding,&lt;init&gt;"/>
      <!-- end temp -->
      <jvmarg value="-Djava.awt.headless=true"/>
      <!--<arg value="-style"/><arg value="pretty"/>-->
      <arg value="-war"/>
      <arg value="${deploy.dir}/gwt"/>
      <arg value="${app.ident}"/>
    </java>

    <!-- if we succeeded, gzip our generated HTML output -->
    <apply failonerror="true" executable="gzip">
      <arg value="-c"/>
      <srcfile/>
      <fileset dir="${deploy.dir}/gwt/${app.ident}" includes="*.cache.html"/>
      <redirector>
        <outputmapper type="glob" from="*.cache.html"
                      to="${deploy.dir}/gwt/${app.ident}/*.cache.html.gz"/>
      </redirector>
    </apply>
  </target>

  <target name="gshell" depends="prepare" description="Runs our GWT client in HostedMode.">
    <java fork="true" classname="com.google.gwt.dev.HostedMode">
      <classpath>
        <pathelement path="lib/gwt/gwt-dev-linux.jar"/>
        <pathelement path="${deploy.dir}/lib/gwt-user.jar"/>
        <pathelement path="${deploy.dir}/lib/gwt-utils-0.0-SNAPSHOT.jar"/>
        <pathelement path="${deploy.dir}/lib/depot-gwt-0.0-SNAPSHOT.jar"/>
        <pathelement path="${deploy.dir}/lib/samskivert-gwt-0.0-SNAPSHOT.jar"/>
        <pathelement path="${deploy.dir}/lib/samsara-app-0.0-SNAPSHOT.jar"/>
        <pathelement path="${src.dir}"/>
        <pathelement path="${gsrc.dir}"/>
      </classpath>
      <arg value="-noserver"/>
      <arg value="-port"/>
      <arg value="8080"/>
      <arg value="-startupUrl"/>
      <arg value="candidate/everything/auth?user=${gshell_username}&amp;pass=${gshell_password}"/>
      <arg value="-war"/>
      <arg value="${deploy.dir}/gwt"/>
      <arg value="everything"/>
    </java>
  </target>

  <target name="flashui" depends="prepare" description="Compiles our Flash UI swf.">
    <copy file="etc/flex-config.xml.in" tofile="${deploy.dir}/flex-config.xml">
      <filterset>
        <filter token="flex_url" value="${flex_url}"/>
      </filterset>
    </copy>

    <java jar="lib/flex_sdk/lib/mxmlc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${deploy.dir}/flex-config.xml"/>
      <!--<arg value="${flex.extra-arg}"/>
      <arg value="${flex.extra-arg-2}"/>-->
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <!--<arg value="-compiler.source-path=rsrc/{locale}/i18n"/>-->
      <!--<arg value="-compiler.verbose-stacktraces=${dev_deployment}"/>-->
      <arg value="-default-size"/>
      <arg value="600"/>
      <arg value="488"/>
      <arg value="-incremental=true"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${app.ident}-ui.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/com/threerings/everything/EverythingUI.as"/>
    </java>
  </target>

  <target name="dist" depends="prepare,compile" description="Builds our app jar file.">
    <jar destfile="${deploy.dir}/${app.ident}.jar">
      <fileset dir="${deploy.dir}/classes" includes="**" excludes="**/tests/**"/>
      <fileset dir="${deploy.dir}" includes="everything.properties"/>
    </jar>
  </target>

  <target name="distall" depends="mavendeps,version,dist,flashui,gclient"
          description="Fetches dependencies and builds everything.">
  </target>

  <target name="tests" depends="compile" description="Runs unit tests.">
    <taskdef name="unit" classpathref="build.classpath"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <unit printsummary="off" haltonfailure="yes">
      <classpath refid="build.classpath"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${src.dir}" includes="**/*Test.java"/>
      </batchtest>
    </unit>
  </target>

  <target name="install-app">
    <delete dir="${instroot.dir}"/>
    <mkdir dir="${instroot.dir}/lib"/>
    <copy todir="${instroot.dir}/lib" file="${deploy.dir}/${app.ident}.jar"/>
    <copyfilelist dest="${instroot.dir}/lib">
      <filelist refid="runtime.libs"/>
    </copyfilelist>
    <mkdir dir="${instroot.dir}/web"/>
    <copy todir="${instroot.dir}/web" preservelastmodified="true">
      <fileset dir="${wsrc.dir}" includes="**"/>
      <fileset dir="${deploy.dir}/gwt/${app.ident}" includes="**"/>
      <fileset dir="${deploy.dir}" includes="everything-ui.swf"/>
    </copy>
    <manifest file="${instroot.dir}/MANIFEST.MF">
      <attribute name="Main-Class" value="com.threerings.everything.server.EverythingApp$Module"/>
    </manifest>
  </target>

  <target name="install" depends="dist" description="Installs our app into the local Samsara.">
    <antcall target="install-app">
      <param name="instroot.dir" value="${local_samsara_dir}/apps/${app.ident}/candidate"/>
    </antcall>
  </target>

  <target name="web" depends="prepare" 
          description="Copies updated style sheets into the local installed app.">
    <copy todir="${local_samsara_dir}/apps/${app.ident}/candidate/web/" preservelastmodified="true">
      <fileset dir="${wsrc.dir}" includes="**"/>
      <fileset dir="${gsrc.dir}/public" includes="**"/>
      <fileset dir="${deploy.dir}" includes="everything-ui.swf"/>
    </copy>
  </target>

  <target name="package" depends="distall" description="Builds our deployment package.">
    <property name="pkgroot.dir" value="${deploy.dir}/packages/${app.ident}-app"/>

    <antcall target="install-app">
      <param name="instroot.dir"
             value="${pkgroot.dir}/${ooo.prefix}/samsara/apps/${app.ident}/candidate"/>
    </antcall>

    <!-- TEMP: define where our .dpkg files will be written -->
    <propertycopy name="package.output" from="ooo.deprecated.package.deploy"/>

    <!-- build the actual Debian package -->
    <dpkg output="${package.output}" prefix="${ooo.prefix}/${app.ident}"
          distribution="${ooo.distribution}">
      <package destroot="${pkgroot.dir}">
        <info>
          <name>${app.ident}-app</name>
          <version>${build.version}</version>
          <arch>${ooo.architecture}</arch>
          <description>Everything App</description>
          <maintainer>
            <name>${pkg.maintainer.name}</name>
            <email>${pkg.maintainer.email}</email>
          </maintainer>
        </info>
        <permissions>
          <permission user="${pkg.user}" group="${pkg.user}" mode="755" recursive="false">
            <path>.</path>
          </permission>
        </permissions>
      </package>
    </dpkg>
  </target>

  <target name="genrecord" depends="prepare" description="Regenerates PersistentRecord classes.">
    <taskdef name="grecord" classname="com.samskivert.depot.tools.GenRecordTask"
             classpathref="build.classpath"/>
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes" debug="on" deprecation="on">
      <classpath refid="build.classpath"/>
      <include name="**/*Record.java"/>
    </javac>
    <!-- now update the source files -->
    <grecord classpathref="build.classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>
</project>
